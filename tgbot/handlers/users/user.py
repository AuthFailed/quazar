import logging

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from dotenv import load_dotenv
from aiogram.fsm.context import FSMContext
import os

from tgbot.keyboards.user.inline import to_home, usermenu_kb_sub, \
    usermenu_kb_revokesub, usermenu_kb_main, usermenu_kb_changestatus, setup_pickdevice
from tgbot.keyboards.user.instructions import androidtv_apps, ios_apps, android_apps, windows_apps
# from tgbot.misc.db import get_reset_date
from tgbot.misc.remna_api import format_bytes, get_user_by_tgid, revoke_user_sub, format_date, days_between_unix_timestamp

user_router = Router()
load_dotenv()


async def is_user_in_channel(user_id: int, bot):
    channel_id = os.environ.get('CHANNEL')
    try:
        sub = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if sub.status != "left":
            return True
        else:
            await bot.send_message(chat_id=user_id, text="""<b>–ü—Ä–∏–≤–µ—Ç üëã</b>

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>‚≠ê –ö–≤–∞–∑–∞—Ä</b>

<b>üòä –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å</b>
1. –û—Ç–∫—Ä–æ–π @tribute
2. –û—Ç–∫—Ä–æ–π –º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π –≤–Ω–∏–∑—É
3. –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª –ü–æ–¥–ø–∏—Å–∫–∏ - –ö–≤–∞–∑–∞—Ä
4. –ù–∞–∂–º–∏ –Ω–∞ —Å—Ç—Ä–µ–ª–æ—á–∫—É —Å–≤–µ—Ä—Ö—É –∏ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª
5. –í–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏ /start

<b>üôÅ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç/–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å</b>
1. –û—Ç–∫—Ä–æ–π <a href="https://t.me/tribute/app?startapp=snKl">–ø–æ–¥–ø–∏—Å–∫—É</a>
2. –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –æ–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É
3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏ –≤ –±–æ—Ç–∞ @tribute –∏ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª
4. –í–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏ /start""", disable_web_page_preview=True)
            return False
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@user_router.message(CommandStart())
async def user_start(message: Message):
    if not await is_user_in_channel(message.from_user.id, bot=message.bot):
        return

    ready_message = f"""‚≠ê <b>–ö–≤–∞–∑–∞—Ä | –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""

    await message.answer(ready_message,
                         reply_markup=usermenu_kb_main())


@user_router.callback_query(F.data == "usermenu")
async def usermenu(callback: CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not await is_user_in_channel(callback.from_user.id, bot=callback.bot):
        await callback.answer()
        return

    ready_message = f"""‚≠ê <b>–ö–≤–∞–∑–∞—Ä | –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""

    await callback.message.edit_text(ready_message, reply_markup=usermenu_kb_main())
    await callback.answer()


@user_router.callback_query(F.data == "usermenu_sub")
async def usermenu_sub(callback: CallbackQuery) -> None:
    """–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥–ø–∏—Å–∫—É...")
    if not await is_user_in_channel(callback.from_user.id, bot=callback.bot):
        return

    user = await get_user_by_tgid(tgid=callback.from_user.id)

    sub_status = ""
    match user["status"]:
        case "ACTIVE":
            sub_status = f"""<b>üé´ –ü–æ–¥–ø–∏—Å–∫–∞</b>: {f"–¥–æ {format_date(user["expireAt"])}" if user["expireAt"] else "‚ôæÔ∏è"}
<b>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</b>: {format_bytes(user["usedTrafficBytes"])} –∏–∑ {format_bytes(user["trafficLimitBytes"])}"""
        case "LIMITED":
            sub_status = f"""<b>üé´ –ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚ùå –õ–∏–º–∏—Ç ({user["expire"]})
<b>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</b>: {format_bytes(user["used_traffic"])} –∏–∑ {format_bytes(user["trafficLimitBytes"])}"""
        case "DISABLED":
            sub_status = f"""<b>üé´ –ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"""
        
        case "EXPIRED":
            sub_status = f"""<b>üé´ –ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚ùå –ò—Å—Ç–µ–∫–ª–∞ {user["expire"]}"""

    ready_message = f"""‚≠ê <b>–ö–≤–∞–∑–∞—Ä | –ü–æ–¥–ø–∏—Å–∫–∞</b>

{sub_status}
<b>‚ôªÔ∏è –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞</b>: –∫–∞–∂–¥–æ–µ 1 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞

<b>üîó –°—Å—ã–ª–∫–∞-–ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞</b>:
<code>{user["subscriptionUrl"]}</code>

<b>–î–æ–ø. –∏–Ω—Ñ–æ</b>
<b>üö¶ –¢—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è</b>: {format_bytes(user["lifetimeUsedTrafficBytes"])}
<b>‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ID</b>: <code>{user["username"]}</code>
"""
    try:
        await callback.message.edit_text(ready_message,
                                     reply_markup=usermenu_kb_sub(user_status=user["status"]))
    except TelegramBadRequest as e:
        pass


@user_router.callback_query(F.data == "usermenu_faq")
async def usermenu_faq(callback: CallbackQuery) -> None:
    """–†–∞–∑–¥–µ–ª –û –ø—Ä–æ–µ–∫—Ç–µ"""
    if not await is_user_in_channel(callback.from_user.id, bot=callback.bot):
        return

    await callback.answer()

    ready_message = """<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –û –ø—Ä–æ–µ–∫—Ç–µ</b>

<b>üåê –õ–æ–∫–∞—Ü–∏–∏</b>
üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç - <code>de.q-access.ru</code>
üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è, –•–µ–ª—å—Å–∏–Ω–∫–∏ - <code>fn.q-access.ru</code>
üá∏üá™ –®–≤–µ—Ü–∏—è, –°—Ç–æ–∫–≥–æ–ª—å–º - <code>sw.q-access.ru</code>

–ú—É–ª—å—Ç–∏—Ö–æ–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ <code>gw.q-access.ru</code> –≤ –†–æ—Å—Å–∏–∏

<b>ü¶æ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è</b>
<blockquote expandable>VPN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Ç–æ–∫–æ–ª VLESS –ø–æ–≤–µ—Ä—Ö TCP —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π REALITY - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ª–∏—á–Ω–æ –º–∞—Å–∫–∏—Ä—É–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–¥ –æ–±—ã—á–Ω—ã–µ HTTPS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è XTLS –∏ Vision –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã</blockquote>

<b>üöß –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</b>
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤
<i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç</i>"""

    await callback.message.edit_text(ready_message,
                                     reply_markup=to_home(), disable_web_page_preview=True)


@user_router.callback_query(F.data == "usermenu_setup")
async def usermenu_instructions(callback: CallbackQuery) -> None:
    """–†–∞–∑–¥–µ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    if not await is_user_in_channel(callback.from_user.id, bot=callback.bot):
        return

    await callback.answer()

    await callback.message.edit_text("""<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>

–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é""",
                                     reply_markup=setup_pickdevice())


@user_router.callback_query(lambda c: c.data.startswith("setup_"))
async def usermenu_instructions(callback: CallbackQuery, state: FSMContext) -> None:
    """–†–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    if not await is_user_in_channel(callback.from_user.id, bot=callback.bot):
        return

    await callback.answer()
    await state.clear()

    device = callback.data.split('_')[1]
    if device == "ios":
        message = """<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è iOS</b>
        
–í—ã–±–µ—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫–æ–µ –≤—ã–±—Ä–∞—Ç—å - –±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–º–µ—á–µ–Ω–æ <b>üî•–æ–≥–æ–Ω—å–∫–æ–º</b>
–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""

        await callback.message.edit_text(message,
                                     reply_markup=ios_apps())
    elif device == "android":
        message = """<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Android</b>

–í—ã–±–µ—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫–æ–µ –≤—ã–±—Ä–∞—Ç—å - –±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–º–µ—á–µ–Ω–æ <b>üî•–æ–≥–æ–Ω—å–∫–æ–º</b>
–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""

        await callback.message.edit_text(message,
                                         reply_markup=android_apps())
    elif device == "windows":
        message = """<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Windows</b>

–í—ã–±–µ—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫–æ–µ –≤—ã–±—Ä–∞—Ç—å - –±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–º–µ—á–µ–Ω–æ <b>üî•–æ–≥–æ–Ω—å–∫–æ–º</b>
–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    elif device == "androidtv":
        message = """<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AndroidTV</b>

–í—ã–±–µ—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫–æ–µ –≤—ã–±—Ä–∞—Ç—å - –±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–º–µ—á–µ–Ω–æ <b>üî•–æ–≥–æ–Ω—å–∫–æ–º</b>
–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""

        await callback.message.edit_text(message,
                                         reply_markup=androidtv_apps())

@user_router.callback_query(F.data == "usermenu_revokesub")
async def usermenu_revokesub(callback: CallbackQuery) -> None:
    """–ú–µ–Ω—é –æ–±–Ω—É–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not await is_user_in_channel(callback.from_user.id, bot=callback.bot):
        return

    await callback.answer()
    await callback.message.edit_text(f"""<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ</b>
–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–æ–±–Ω—É–ª–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É</b>
–í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Å—ã–ª–∫–µ - <b>–ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç–∞—Ç—å</b>, –Ω–æ –ø–æ –Ω–µ–π –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤

–ù–æ–≤—É—é —Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é

<i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –∫ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∫—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø</i>""",
                                     reply_markup=usermenu_kb_revokesub())


@user_router.callback_query(F.data == "usermenu_revokesub_agree")
async def usermenu_revokesub_agree(callback: CallbackQuery) -> None:
    """–û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_user_in_channel(callback.from_user.id, bot=callback.bot):
        return

    await callback.answer("–û–±–Ω—É–ª—è—é –ø–æ–¥–ø–∏—Å–∫—É...")
    user = await revoke_user_sub(callback.from_user.id)

    sub_status = ""
    match user["status"]:
        case "ACTIVE":
            sub_status = f"""<b>üé´ –ü–æ–¥–ø–∏—Å–∫–∞</b>: {f"–¥–æ {format_date(user["expireAt"])}" if user["expireAt"] else "‚ôæÔ∏è"}
<b>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</b>: {format_bytes(user["usedTrafficBytes"])} –∏–∑ {format_bytes(user["trafficLimitBytes"])}"""
        case "LIMITED":
            sub_status = f"""<b>üé´ –ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚ùå –õ–∏–º–∏—Ç ({user["expire"]})
<b>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</b>: {format_bytes(user["used_traffic"])} –∏–∑ {format_bytes(user["trafficLimitBytes"])}"""
        case "DISABLED":
            sub_status = f"""<b>üé´ –ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"""
        
        case "EXPIRED":
            sub_status = f"""<b>üé´ –ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚ùå –ò—Å—Ç–µ–∫–ª–∞ {user["expire"]}"""

    ready_message = f"""‚≠ê <b>–ö–≤–∞–∑–∞—Ä | –ü–æ–¥–ø–∏—Å–∫–∞</b>

{sub_status}
<b>‚ôªÔ∏è –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞</b>: –∫–∞–∂–¥–æ–µ 1 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞

<b>üîó –°—Å—ã–ª–∫–∞-–ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞</b>:
<code>{user["subscriptionUrl"]}</code>

<b>–î–æ–ø. –∏–Ω—Ñ–æ</b>
<b>üö¶ –¢—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è</b>: {format_bytes(user["lifetimeUsedTrafficBytes"])}
<b>‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ID</b>: <code>{user["username"]}</code>
"""
    try:
        await callback.message.edit_text(ready_message,
                                     reply_markup=usermenu_kb_sub(user_status=user["status"]))
    except TelegramBadRequest as e:
        pass