from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery

from tgbot.filters.admin import AdminFilter
from tgbot.keyboards.admin.inline import admin_menu, admin_vpn_menu_core, to_home
from tgbot.misc.marzban_api import get_system_stats, restart_core, get_core_config, get_nodes_data

admin_router = Router()
admin_router.message.filter(AdminFilter())


@admin_router.message(CommandStart())
async def admin_start(message: Message):
    await message.answer("<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                         "–Ø - –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ö–≤–∞–∑–∞—Ä\n"
                         "<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è</i>", reply_markup=admin_menu())


@admin_router.callback_query(F.data == "adminmenu")
async def adminmenu(callback: CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()

    await callback.message.edit_text("<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                         "–Ø - –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ö–≤–∞–∑–∞—Ä\n"
                         "<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è</i>", reply_markup=admin_menu())

@admin_router.callback_query(F.data == "adminmenu_serverstatus")
async def adminmenu_serverstatus(callback: CallbackQuery) -> None:
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...")
    server_stats = await get_system_stats()

    await callback.message.edit_text("‚≠ê <b>‚≠ê –ö–≤–∞–∑–∞—Ä | –°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª–∏</b>\n\n"
                                     "<b>–°–µ—Ä–≤–µ—Ä</b>\n"
                                     f"‚ö° –ü–∞–º—è—Ç—å: {server_stats['mem_used']} | {server_stats['mem_total']}\n"
                                     f"üß† –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {server_stats['cpu_cores']} —è–¥–µ—Ä, –Ω–∞–≥—Ä—É–∑–∫–∞ {server_stats['cpu_usage']}\n\n"
                                     f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n"
                                     f"üßÆ –í—Å–µ–≥–æ: {server_stats['total_user']}\n"
                                     f"üü¢ –ê–∫—Ç–∏–≤–Ω–æ: {server_stats['users_active']}\n\n"
                                     f"<b>–¢—Ä–∞—Ñ–∏–∫</b>\n"
                                     f"üì• –í—Ö–æ–¥—è—â–∏–π: {server_stats['incoming_bandwidth']}\n"
                                     f"üì§ –ò—Å—Ö–æ–¥—è—â–∏–π: {server_stats['outgoing_bandwidth']}\n\n"
                                     f"<b>–°–∫–æ—Ä–æ—Å—Ç—å</b>\n"
                                     f"–í—Ö–æ–¥: {server_stats['incoming_bandwidth_speed']} ‚¨áÔ∏è\n"
                                     f"–ò—Å—Ö–æ–¥: {server_stats['outgoing_bandwidth_speed']} ‚¨ÜÔ∏è", reply_markup=to_home())

@admin_router.callback_query(F.data == "adminmenu_users")
async def adminmenu_users(callback: CallbackQuery) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ VPN"""
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

@admin_router.callback_query(F.data == "adminmenu_nodes")
async def adminmenu_nodes(callback: CallbackQuery) -> None:
    """–ù–æ–¥—ã"""
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–π...")

    node_data = await get_nodes_data()
    message = "<b>‚≠ê –ö–≤–∞–∑–∞—Ä | –ù–æ–¥—ã</b>\n\n"
    for node in node_data:
        if "de" in node[0]:
            message += f"üá©üá™ <b>{node[0]}</b>\n"
        elif "fn" in node[0]:
            message += f"üá´üáÆ <b>{node[0]}</b>\n"
        elif "au" in node[0]:
            message += f"üá¶üáπ <b>{node[0]}</b>\n"
        elif "sw" in node[0]:
            message += f"üá∏üá™ <b>{node[0]}</b>\n"
        elif "ru" in node[0]:
            message += f"üá∑üá∫ <b>{node[0]}</b>\n"
        message += (f"üåê IP: <code>{node[1]}</code>\n"
                    f"üîå –ü–æ—Ä—Ç: <code>{node[2]}</code> / <code>{node[3]}</code>\n"
                    f"‚è≥ –°—Ç–∞—Ç—É—Å: {'‚úÖ' if node[4] == "connected" else '‚ùå'}\n"
                    f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <code>{node[5]}</code>\n"
                    f"üè∑Ô∏è Xray: {'<code>' + node[6] + '</code>' if node[6] is not None else "‚ùå "}\n"
                    f"üìä –ö–æ—ç—Ñ: <code>{node[7]}</code>\n\n")
    await callback.message.edit_text(message, reply_markup=to_home())

@admin_router.callback_query(F.data == "adminmenu_core")
async def adminmenu_core(callback: CallbackQuery) -> None:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–¥—Ä–æ–º"""
    await callback.answer()

    await callback.message.edit_text("‚≠ê <b>–ö–≤–∞–∑–∞—Ä</b>\n\n"
                                     "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–¥—Ä–æ–º Xray", reply_markup=admin_vpn_menu_core())

@admin_router.callback_query(F.data == "adminmenu_core_xray_config")
async def adminmenu_core_xray_config(callback: CallbackQuery) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ —è–¥—Ä–∞ Xray"""
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥ —è–¥—Ä–∞...")

    core_config = await get_core_config()
    ready_message = ("‚≠ê <b>–ö–≤–∞–∑–∞—Ä</b>\n\n"
                     "–ö–æ–Ω—Ñ–∏–≥ —è–¥—Ä–∞:\n"
                     f"<pre><code>{core_config}</code></pre>")
    await callback.message.edit_text(ready_message, reply_markup=admin_vpn_menu_core())

@admin_router.callback_query(F.data == "adminmenu_core_restartxray")
async def adminmenu_core_restartxray(callback: CallbackQuery) -> None:
    """–†–µ—Å—Ç–∞—Ä—Ç —è–¥—Ä–∞ Xray"""
    await restart_core()
    await callback.answer("–Ø–¥—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –Ω–æ–¥–∞—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")
